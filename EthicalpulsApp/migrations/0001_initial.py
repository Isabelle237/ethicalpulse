# Generated by Django 5.2.2 on 2025-06-08 16:31

import EthicalpulsApp.validators
import django.db.models.deletion
import django.utils.timezone
import pyotp
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Project',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Nom du projet')),
                ('description', models.TextField(blank=True, verbose_name='Description')),
                ('project_type', models.CharField(choices=[('web', 'Application Web'), ('api', 'API'), ('mobile', 'Application Mobile'), ('infra', 'Infrastructure Réseau'), ('desktop', 'Application Desktop'), ('autre', 'Autre')], max_length=20, verbose_name='Type de projet')),
                ('domain', models.CharField(blank=True, max_length=255, null=True, verbose_name='Nom de domaine')),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True, validators=[EthicalpulsApp.validators.validate_ip], verbose_name='Adresse IP')),
                ('url', models.URLField(blank=True, null=True, validators=[EthicalpulsApp.validators.validate_url], verbose_name='URL')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Date de création')),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Scan',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='Nom du scan')),
                ('tool', models.CharField(choices=[('ZAP', 'OWASP ZAP'), ('NMAP', 'Nmap'), ('SQLMAP', 'SQLMap'), ('AIRCRACK', 'Aircrack-ng'), ('BEEF', 'BeEF'), ('METASPLOIT', 'Metasploit'), ('HASHCAT', 'Hashcat'), ('JOHN', 'John The Ripper'), ('RECONNG', 'Recon-ng'), ('WIRESHARK', 'Wireshark'), ('WIFITE', 'Wifite'), ('GHIDRA', 'Ghidra'), ('SNORT', 'Snort'), ('NETCAT', 'Netcat'), ('NIKTO', 'Nikto')], max_length=20, verbose_name='Outil utilisé')),
                ('status', models.CharField(choices=[('scheduled', 'Planifié'), ('in_progress', 'En cours'), ('completed', 'Terminé'), ('failed', 'Échoué')], default='scheduled', max_length=20)),
                ('start_time', models.DateTimeField(blank=True, null=True)),
                ('end_time', models.DateTimeField(blank=True, null=True)),
                ('progress', models.IntegerField(default=0)),
                ('duration', models.FloatField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('notified', models.BooleanField(default=False)),
                ('error_log', models.TextField(blank=True, null=True)),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='scans', to='EthicalpulsApp.project')),
            ],
        ),
        migrations.CreateModel(
            name='ReconngResult',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('option', models.CharField(choices=[('modules load recon/domains-hosts/brute_hosts', 'Brute force DNS'), ('modules load recon/hosts-hosts/resolve', 'Résolution DNS'), ('modules load recon/domains-contacts/whois_pocs', 'Contacts WHOIS'), ('modules load recon/domains-vulnerabilities/xssed', 'Archives XSSed'), ('modules load recon/domains-hosts/google_site_web', 'Recherche Google Site Web')], max_length=50)),
                ('subdomain', models.CharField(max_length=255)),
                ('ip_address', models.GenericIPAddressField()),
                ('email_found', models.EmailField(blank=True, max_length=254, null=True)),
                ('whois_info', models.TextField(blank=True, null=True)),
                ('scan', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='EthicalpulsApp.scan')),
            ],
        ),
        migrations.CreateModel(
            name='OwaspZapResult',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('option', models.CharField(choices=[('-quickurl', 'Scan rapide - Analyse de base'), ('-ajax', 'Scan Ajax - Analyse des applications Ajax'), ('-full', 'Scan complet - Analyse approfondie'), ('-xss', 'XSS - Test des vulnérabilités XSS uniquement'), ('-sqli', 'SQL Injection - Test des vulnérabilités SQLi uniquement')], max_length=10)),
                ('url', models.URLField()),
                ('risk', models.CharField(max_length=50)),
                ('vulnerability', models.CharField(max_length=255)),
                ('description', models.TextField()),
                ('evidence', models.TextField(blank=True, null=True)),
                ('recommendation', models.TextField()),
                ('scan', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='EthicalpulsApp.scan')),
            ],
        ),
        migrations.CreateModel(
            name='NmapResult',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('target', models.CharField(blank=True, max_length=255, null=True)),
                ('command_used', models.TextField(blank=True, null=True)),
                ('option', models.CharField(choices=[('-sS', 'Scan SYN - Scan furtif TCP'), ('-sT', 'Scan TCP - Établit connexions complètes'), ('-sU', 'Scan UDP - Détecte services UDP'), ('-sV', 'Détection Version - Identifie services/versions'), ('-O', "OS Detection - Identifie systèmes d'exploitation"), ('-A', 'Scan Agressif - OS, version, scripts, traceroute'), ('-p-', 'Tous Ports - Scanne tous les ports TCP'), ('-F', 'Scan rapide - Scan SYN des ports les plus courants')], max_length=255)),
                ('start_time', models.DateTimeField(auto_now_add=True)),
                ('end_time', models.DateTimeField(blank=True, null=True)),
                ('returncode', models.IntegerField(blank=True, null=True)),
                ('os_detected', models.CharField(blank=True, max_length=255, null=True)),
                ('os_accuracy', models.CharField(blank=True, max_length=100, null=True)),
                ('traceroute', models.TextField(blank=True, null=True)),
                ('script_results', models.TextField(blank=True, null=True)),
                ('full_output', models.TextField(blank=True, null=True)),
                ('open_tcp_ports', models.TextField(blank=True, null=True)),
                ('open_udp_ports', models.TextField(blank=True, null=True)),
                ('service_details', models.TextField(blank=True, null=True)),
                ('scan_status', models.CharField(blank=True, default='pending', max_length=50, null=True)),
                ('error_log', models.TextField(blank=True, null=True)),
                ('scan', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='nmap_results', to='EthicalpulsApp.scan')),
            ],
        ),
        migrations.CreateModel(
            name='NiktoResult',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('option', models.CharField(choices=[('-h', "Scan standard d'un hôte"), ('-Tuning 9', "Tests d'injection SQL"), ('-Tuning 4', 'Tests XSS'), ('-ssl', "Force l'utilisation de SSL/HTTPS"), ('-nossl', "Force l'utilisation de HTTP"), ('-Cgidirs all', 'Teste tous les dossiers CGI')], max_length=44)),
                ('nikto_raw_output', models.TextField(blank=True, null=True)),
                ('vulnerability', models.TextField(blank=True, null=True)),
                ('description', models.TextField()),
                ('uri', models.CharField(blank=True, max_length=255, null=True)),
                ('target_hostname', models.CharField(blank=True, max_length=255, null=True)),
                ('target_port', models.IntegerField()),
                ('server', models.CharField(blank=True, max_length=255, null=True)),
                ('ssl_subject', models.CharField(blank=True, max_length=255, null=True)),
                ('ssl_issuer', models.CharField(blank=True, max_length=255, null=True)),
                ('ssl_altnames', models.CharField(blank=True, max_length=255, null=True)),
                ('ssl_cipher', models.CharField(blank=True, max_length=255, null=True)),
                ('x_powered_by', models.CharField(blank=True, max_length=255, null=True)),
                ('x_frame_options', models.CharField(blank=True, max_length=255, null=True)),
                ('link_headers', models.TextField(blank=True, null=True)),
                ('via_header', models.CharField(blank=True, max_length=255, null=True)),
                ('content_security_policy', models.TextField(blank=True, null=True)),
                ('strict_transport_security', models.CharField(blank=True, max_length=255, null=True)),
                ('referrer_policy', models.CharField(blank=True, max_length=255, null=True)),
                ('content_type', models.CharField(blank=True, max_length=255, null=True)),
                ('cache_control', models.CharField(blank=True, max_length=255, null=True)),
                ('expires', models.CharField(blank=True, max_length=255, null=True)),
                ('pragma', models.CharField(blank=True, max_length=255, null=True)),
                ('set_cookie', models.TextField(blank=True, null=True)),
                ('location_header', models.CharField(blank=True, max_length=255, null=True)),
                ('parsed_vulnerabilities', models.TextField(blank=True)),
                ('scan_completed', models.BooleanField(default=False)),
                ('total_requests', models.IntegerField(default=0)),
                ('percent_complete', models.FloatField(default=0.0)),
                ('scan', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='EthicalpulsApp.scan')),
            ],
        ),
        migrations.CreateModel(
            name='NetcatResult',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('option', models.CharField(choices=[('-lvp', 'Listener (-lvp) - Écoute sur un port'), ('-v', 'Connexion (-v) - Connecter à un port'), ('-z', 'Scanner Port (-z) - Scanner ports sans envoi de données'), ('-e', 'Exécution (-e) - Exécuter programme après connexion'), ('-u', 'UDP (-u) - Utiliser UDP au lieu de TCP')], max_length=4)),
                ('port', models.IntegerField()),
                ('state', models.CharField(max_length=20)),
                ('protocol', models.CharField(default='TCP', max_length=10)),
                ('banner', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('scan', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='EthicalpulsApp.scan')),
            ],
        ),
        migrations.CreateModel(
            name='MetasploitResult',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('option', models.CharField(choices=[('use exploit/multi/handler', 'Configure un handler'), ('use auxiliary/scanner/smb/smb_version', 'Scanner SMB'), ('use auxiliary/scanner/http/dir_scanner', 'Scanner les répertoires HTTP'), ('use exploit/windows/smb/ms17_010_eternalblue', 'Exploit MS17-010 (EternalBlue)'), ('use exploit/multi/http/wp_admin_shell_upload', 'Upload de shell admin WordPress')], max_length=44)),
                ('vulnerability', models.CharField(max_length=255)),
                ('exploited', models.BooleanField(default=False)),
                ('payload', models.CharField(blank=True, max_length=255, null=True)),
                ('session_info', models.TextField(blank=True, null=True)),
                ('scan', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='EthicalpulsApp.scan')),
            ],
        ),
        migrations.CreateModel(
            name='JohntheripperResult',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('option', models.CharField(choices=[('--wordlist', 'Attaque par dictionnaire'), ('--rules', 'Utilise des règles de mutation'), ('--incremental', 'Mode brute-force'), ('--format=md5', 'Hash MD5'), ('--format=sha1', 'Hash SHA1'), ('--show', 'Affiche les mots de passe craqués')], max_length=20)),
                ('hash', models.TextField()),
                ('cracked_password', models.CharField(max_length=255)),
                ('method_used', models.CharField(max_length=100)),
                ('scan', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='EthicalpulsApp.scan')),
            ],
        ),
        migrations.CreateModel(
            name='HashcatResult',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('option', models.CharField(choices=[('-a 0', 'Attaque par dictionnaire'), ('-a 1', 'Attaque par combinaison'), ('-a 3', 'Attaque par brute-force'), ('-a 6', 'Attaque hybride (dictionnaire + masque)'), ('-a 7', 'Attaque hybride (masque + dictionnaire)'), ('-m 0', 'Hash MD5')], max_length=10)),
                ('hash_type', models.CharField(max_length=100)),
                ('original_hash', models.TextField()),
                ('cracked_password', models.CharField(blank=True, max_length=255, null=True)),
                ('time_taken', models.FloatField()),
                ('scan', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='EthicalpulsApp.scan')),
            ],
        ),
        migrations.CreateModel(
            name='GhidraResult',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('option', models.CharField(choices=[('analyzeHeadless', 'Analyse en ligne de commande'), ('launch', "Lance l'interface graphique"), ('analyzeHeadless -import', 'Importe un fichier binaire'), ('analyzeHeadless -process', 'Traite un fichier binaire'), ('analyzeHeadless -export', 'Exporte les résultats')], max_length=24)),
                ('binary_name', models.CharField(max_length=255)),
                ('analysis_report', models.TextField()),
                ('scan', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='EthicalpulsApp.scan')),
            ],
        ),
        migrations.CreateModel(
            name='BeefResult',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('option', models.CharField(choices=[('-x', 'Active les consoles XSS'), ('--host', "Spécifie l'hôte d'écoute"), ('--port', "Spécifie le port d'écoute"), ('--password', 'Définit un mot de passe'), ('--hook-url', 'URL du hook pour exploiter les navigateurs')], max_length=15)),
                ('victim_ip', models.GenericIPAddressField()),
                ('browser', models.CharField(max_length=100)),
                ('os', models.CharField(max_length=100)),
                ('hook_time', models.DateTimeField()),
                ('executed_modules', models.TextField()),
                ('scan', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='EthicalpulsApp.scan')),
            ],
        ),
        migrations.CreateModel(
            name='AircrackngResult',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('option', models.CharField(choices=[('airmon-ng start', 'Active le mode moniteur'), ('airodump-ng', 'Capture les paquets WiFi'), ('aireplay-ng -0', 'Effectue une attaque de désauthentification'), ('aircrack-ng -w', 'Cracker une clé WPA avec une wordlist'), ('aircrack-ng -K', 'Attaque PTW (WEP)')], max_length=20)),
                ('ssid', models.CharField(max_length=100)),
                ('mac_address', models.CharField(max_length=17)),
                ('channel', models.IntegerField()),
                ('signal_strength', models.IntegerField()),
                ('encryption', models.CharField(max_length=20)),
                ('key', models.CharField(blank=True, max_length=100, null=True)),
                ('scan', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='EthicalpulsApp.scan')),
            ],
        ),
        migrations.CreateModel(
            name='ScheduledScan',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=255, null=True, verbose_name='Nom')),
                ('description', models.TextField(blank=True, null=True, verbose_name='Description')),
                ('tool', models.CharField(choices=[('ZAP', 'OWASP ZAP'), ('NMAP', 'Nmap'), ('SQLMAP', 'SQLMap'), ('NIKTO', 'Nikto')], max_length=20, verbose_name='Outil')),
                ('frequency', models.CharField(choices=[('once', 'Une seule fois'), ('daily', 'Quotidien'), ('weekly', 'Hebdomadaire'), ('monthly', 'Mensuel')], max_length=20, verbose_name='Fréquence')),
                ('next_run_time', models.DateTimeField(verbose_name='Prochaine exécution')),
                ('last_run', models.DateTimeField(blank=True, null=True, verbose_name='Dernière exécution')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('is_active', models.BooleanField(default=True)),
                ('status', models.CharField(choices=[('pending', 'En attente'), ('running', 'En cours'), ('completed', 'Terminé'), ('failed', 'Échoué'), ('cancelled', 'Annulé')], default='pending', max_length=20)),
                ('error_log', models.TextField(blank=True, null=True)),
                ('configuration', models.JSONField(blank=True, null=True)),
                ('email_notification', models.BooleanField(default=True, verbose_name='Notifications par email')),
                ('target', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='scheduled_scans', to='EthicalpulsApp.project', verbose_name='Projet cible')),
            ],
            options={
                'verbose_name': 'Scan planifié',
                'verbose_name_plural': 'Scans planifiés',
                'ordering': ['next_run_time'],
            },
        ),
        migrations.AddField(
            model_name='scan',
            name='scheduled_scan',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='EthicalpulsApp.scheduledscan'),
        ),
        migrations.CreateModel(
            name='SnortResult',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('option', models.CharField(choices=[('-T', 'Teste la configuration'), ('-c', 'Spécifie un fichier de configuration'), ('-i', 'Spécifie une interface'), ('-A', "Mode d'alerte"), ('-l', 'Dossier de logs')], max_length=5)),
                ('alert_message', models.TextField()),
                ('packet_info', models.TextField()),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('scan', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='EthicalpulsApp.scan')),
            ],
        ),
        migrations.CreateModel(
            name='SqlmapResult',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_vulnerable', models.BooleanField(default=False)),
                ('injection_type', models.CharField(blank=True, max_length=100, null=True)),
                ('dbms', models.CharField(blank=True, max_length=100, null=True)),
                ('payloads', models.TextField(blank=True, null=True)),
                ('options_used', models.TextField(blank=True, null=True)),
                ('techniques_used', models.CharField(blank=True, max_length=50, null=True)),
                ('dbs_found', models.TextField(blank=True, null=True)),
                ('tables_found', models.JSONField(blank=True, null=True)),
                ('columns_found', models.JSONField(blank=True, null=True)),
                ('data_dumped', models.JSONField(blank=True, null=True)),
                ('operating_system', models.CharField(blank=True, max_length=100, null=True)),
                ('web_server', models.CharField(blank=True, max_length=100, null=True)),
                ('raw_output', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('project', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='EthicalpulsApp.project')),
                ('scan', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='sqlmap_result', to='EthicalpulsApp.scan')),
            ],
        ),
        migrations.CreateModel(
            name='Vulnerability',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='Nom de la vulnérabilité')),
                ('description', models.TextField(blank=True, null=True, verbose_name='Description')),
                ('severity', models.CharField(choices=[('critical', 'Critique'), ('high', 'Élevée'), ('medium', 'Moyenne'), ('low', 'Faible'), ('info', 'Information')], max_length=50, verbose_name='Gravité')),
                ('target_url', models.URLField(blank=True, null=True, verbose_name='URL cible')),
                ('remediation', models.TextField(blank=True, null=True, verbose_name='Remédiation')),
                ('cve_id', models.CharField(blank=True, max_length=50, null=True, verbose_name='CVE ID')),
                ('status', models.CharField(choices=[('open', 'Ouverte'), ('in_progress', 'En cours'), ('resolved', 'Résolue'), ('closed', 'Fermée'), ('false_positive', 'Faux positif')], default='open', max_length=50, verbose_name='Statut')),
                ('discovered_at', models.DateTimeField(auto_now_add=True, verbose_name='Date de découverte')),
                ('resolved_at', models.DateTimeField(blank=True, null=True)),
                ('alert', models.CharField(blank=True, max_length=255, null=True, verbose_name='Alerte')),
                ('risk', models.CharField(blank=True, max_length=50, null=True, verbose_name='Risque')),
                ('confidence', models.CharField(blank=True, max_length=50, null=True, verbose_name='Confiance')),
                ('evidence', models.TextField(blank=True, null=True, verbose_name='Preuve')),
                ('reference', models.TextField(blank=True, null=True, verbose_name='Références')),
                ('parameter', models.CharField(blank=True, max_length=255, null=True, verbose_name='Paramètre vulnérable')),
                ('technique', models.CharField(blank=True, max_length=255, null=True, verbose_name='Technique utilisée')),
                ('dbms', models.CharField(blank=True, max_length=255, null=True, verbose_name='SGBD détecté')),
                ('request_type', models.CharField(blank=True, max_length=50, null=True, verbose_name='Type de requête')),
                ('port', models.IntegerField(blank=True, null=True, verbose_name='Port')),
                ('protocol', models.CharField(blank=True, max_length=50, null=True, verbose_name='Protocole')),
                ('state', models.CharField(blank=True, max_length=50, null=True, verbose_name='État')),
                ('service', models.CharField(blank=True, max_length=255, null=True, verbose_name='Service')),
                ('version', models.CharField(blank=True, max_length=255, null=True, verbose_name='Version du service')),
                ('scan', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='vulnerabilities', to='EthicalpulsApp.scan')),
            ],
        ),
        migrations.CreateModel(
            name='WifiteResult',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('option', models.CharField(choices=[('-all', 'Attaque tous les réseaux'), ('-wpa', 'Cible uniquement WPA/WPA2'), ('-wep', 'Cible uniquement WEP'), ('-wps', 'Cible uniquement WPS'), ('-dict', 'Spécifie un dictionnaire')], max_length=10)),
                ('target_ssid', models.CharField(max_length=100)),
                ('mac_address', models.CharField(max_length=17)),
                ('encryption_type', models.CharField(max_length=20)),
                ('attack_status', models.CharField(max_length=50)),
                ('scan', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='EthicalpulsApp.scan')),
            ],
        ),
        migrations.CreateModel(
            name='WiresharkResult',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('option', models.CharField(choices=[('-i', 'Capture sur une interface'), ('-r', 'Ouvre un fichier de capture'), ('-f', 'Applique un filtre BPF'), ('-Y', "Applique un filtre d'affichage"), ('-w', 'Écrit dans un fichier')], max_length=5)),
                ('protocol', models.CharField(max_length=50)),
                ('src_ip', models.GenericIPAddressField()),
                ('dst_ip', models.GenericIPAddressField()),
                ('length', models.IntegerField()),
                ('info', models.TextField()),
                ('scan', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='EthicalpulsApp.scan')),
            ],
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('username', models.CharField(max_length=150)),
                ('role', models.CharField(choices=[('ADMIN', 'Administrateur'), ('PROJECT_MANAGER', 'Chef de projet'), ('DEVELOPER', 'Développeur'), ('SECURITY_ANALYST', 'Analyste sécurité')], max_length=30)),
                ('is_active', models.BooleanField(default=True)),
                ('is_staff', models.BooleanField(default=False)),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now)),
                ('last_login', models.DateTimeField(blank=True, null=True)),
                ('otp_code', models.CharField(blank=True, max_length=6, null=True)),
                ('otp_created_at', models.DateTimeField(blank=True, null=True)),
                ('otp_secret', models.CharField(default=pyotp.random_base32, max_length=32)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='UserNotification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('message', models.TextField()),
                ('is_read', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='SystemLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('type', models.CharField(choices=[('auth', 'Authentification'), ('scan', 'Scans'), ('vuln', 'Vulnérabilités'), ('system', 'Système')], max_length=10)),
                ('level', models.CharField(choices=[('info', 'Information'), ('warning', 'Avertissement'), ('error', 'Erreur'), ('critical', 'Critique')], max_length=10)),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True)),
                ('message', models.TextField()),
                ('url', models.URLField(blank=True, max_length=500, null=True)),
                ('user_agent', models.TextField(blank=True, null=True)),
                ('data', models.JSONField(blank=True, null=True)),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-timestamp'],
            },
        ),
        migrations.AddField(
            model_name='scheduledscan',
            name='created_by',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Créé par'),
        ),
        migrations.CreateModel(
            name='ScanTemplate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField()),
                ('configuration', models.JSONField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('is_active', models.BooleanField(default=True)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.AddField(
            model_name='scan',
            name='created_by',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL),
        ),
    ]
